{"version":3,"file":"main.bundle.js","sources":["webpack:///./src/main.browser.ts","webpack:///./~/@angular2-material/core/portal/portal.js","webpack:///./~/@angular2-material/core/overlay/overlay-state.js","webpack:///./src/app/services/raider.ts","webpack:///./~/@angular2-material/core/overlay/overlay-ref.js","webpack:///./~/@angular2-material/core/overlay/overlay.js","webpack:///./~/@angular2-material/core/overlay/position/connected-position.js","webpack:///./~/@angular2-material/core/overlay/position/viewport-ruler.js","webpack:///./~/@angular2-material/core/portal/dom-portal-host.js","webpack:///./~/@angular2-material/core/portal/portal-errors.js","webpack:///./~/@angular2-material/core/style/apply-transform.js","webpack:///./~/@angular2-material/core/a11y/live-announcer.js","webpack:///./~/@angular2-material/core/core.js","webpack:///./~/@angular2-material/core/gestures/MdGestureConfig.js","webpack:///./~/@angular2-material/core/overlay/overlay-directives.js","webpack:///./~/@angular2-material/core/overlay/position/connected-position-strategy.js","webpack:///./~/@angular2-material/core/overlay/position/global-position-strategy.js","webpack:///./~/@angular2-material/core/overlay/position/overlay-position-builder.js","webpack:///./~/@angular2-material/core/portal/portal-directives.js","webpack:///./~/@angular2-material/core/rtl/dir.js","webpack:///./src/app/app.routes.ts","webpack:///./src/app/app.ts","webpack:///./src/app/components/about/about.ts","webpack:///./src/app/components/home/home.ts","webpack:///./src/app/components/sprint-name/index.ts","webpack:///./src/app/components/sprint-name/sprint-name.ts","webpack:///./src/app/app.html","webpack:///./src/app/components/about/about.html","webpack:///./src/app/components/home/home.html","webpack:///./src/app/components/sprint-name/sprint-name.html","webpack:///./src/app/app.css","webpack:///./src/app/components/about/about.css","webpack:///./src/app/components/home/home.css","webpack:///./src/app/components/sprint-name/sprint-name.css"],"sourcesContent":["import {LocationStrategy, HashLocationStrategy} from '@angular/common';\nimport {bootstrap} from '@angular/platform-browser-dynamic';\nimport {HTTP_PROVIDERS} from '@angular/http';\n\n// import {enableProdMode} from '@angular/core';\nimport {APP_ROUTER_PROVIDERS} from './app/app.routes';\nimport {App} from './app/app';\n\n// enableProdMode()\n\nbootstrap(App, [\n  HTTP_PROVIDERS,\n  APP_ROUTER_PROVIDERS,\n  { provide: LocationStrategy, useClass: HashLocationStrategy }\n])\n.catch(err => console.error(err));\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/main.browser.ts\n **/","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar portal_errors_1 = require('./portal-errors');\r\n/**\r\n * A `Portal` is something that you want to render somewhere else.\r\n * It can be attach to / detached from a `PortalHost`.\r\n */\r\nvar Portal = (function () {\r\n    function Portal() {\r\n    }\r\n    /** Attach this portal to a host. */\r\n    Portal.prototype.attach = function (host) {\r\n        if (host == null) {\r\n            throw new portal_errors_1.MdNullPortalHostError();\r\n        }\r\n        if (host.hasAttached()) {\r\n            throw new portal_errors_1.MdPortalAlreadyAttachedError();\r\n        }\r\n        this._attachedHost = host;\r\n        return host.attach(this);\r\n    };\r\n    /** Detach this portal from its host */\r\n    Portal.prototype.detach = function () {\r\n        var host = this._attachedHost;\r\n        if (host == null) {\r\n            throw new portal_errors_1.MdNoPortalAttachedError();\r\n        }\r\n        this._attachedHost = null;\r\n        return host.detach();\r\n    };\r\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\r\n        /** Whether this portal is attached to a host. */\r\n        get: function () {\r\n            return this._attachedHost != null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\r\n     * the PortalHost when it is performing an `attach()` or `detatch()`.\r\n     */\r\n    Portal.prototype.setAttachedHost = function (host) {\r\n        this._attachedHost = host;\r\n    };\r\n    return Portal;\r\n}());\r\nexports.Portal = Portal;\r\n/**\r\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n */\r\nvar ComponentPortal = (function (_super) {\r\n    __extends(ComponentPortal, _super);\r\n    function ComponentPortal(component, viewContainerRef) {\r\n        if (viewContainerRef === void 0) { viewContainerRef = null; }\r\n        _super.call(this);\r\n        this.component = component;\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n    return ComponentPortal;\r\n}(Portal));\r\nexports.ComponentPortal = ComponentPortal;\r\n/**\r\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\r\n */\r\nvar TemplatePortal = (function (_super) {\r\n    __extends(TemplatePortal, _super);\r\n    function TemplatePortal(template, viewContainerRef) {\r\n        _super.call(this);\r\n        /**\r\n         * Additional locals for the instantiated embedded view.\r\n         * These locals can be seen as \"exports\" for the template, such as how ngFor has\r\n         * index / event / odd.\r\n         * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\r\n         */\r\n        this.locals = new Map();\r\n        this.templateRef = template;\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\r\n        get: function () {\r\n            return this.templateRef.elementRef;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TemplatePortal.prototype.attach = function (host, locals) {\r\n        this.locals = locals == null ? new Map() : locals;\r\n        return _super.prototype.attach.call(this, host);\r\n    };\r\n    TemplatePortal.prototype.detach = function () {\r\n        this.locals = new Map();\r\n        return _super.prototype.detach.call(this);\r\n    };\r\n    return TemplatePortal;\r\n}(Portal));\r\nexports.TemplatePortal = TemplatePortal;\r\n/**\r\n * Partial implementation of PortalHost that only deals with attaching either a\r\n * ComponentPortal or a TemplatePortal.\r\n */\r\nvar BasePortalHost = (function () {\r\n    function BasePortalHost() {\r\n        /** Whether this host has already been permanently disposed. */\r\n        this._isDisposed = false;\r\n    }\r\n    /** Whether this host has an attached portal. */\r\n    BasePortalHost.prototype.hasAttached = function () {\r\n        return this._attachedPortal != null;\r\n    };\r\n    BasePortalHost.prototype.attach = function (portal) {\r\n        if (portal == null) {\r\n            throw new portal_errors_1.MdNullPortalError();\r\n        }\r\n        if (this.hasAttached()) {\r\n            throw new portal_errors_1.MdPortalAlreadyAttachedError();\r\n        }\r\n        if (this._isDisposed) {\r\n            throw new portal_errors_1.MdPortalHostAlreadyDisposedError();\r\n        }\r\n        if (portal instanceof ComponentPortal) {\r\n            this._attachedPortal = portal;\r\n            return this.attachComponentPortal(portal);\r\n        }\r\n        else if (portal instanceof TemplatePortal) {\r\n            this._attachedPortal = portal;\r\n            return this.attachTemplatePortal(portal);\r\n        }\r\n        throw new portal_errors_1.MdUnknownPortalTypeError();\r\n    };\r\n    BasePortalHost.prototype.detach = function () {\r\n        this._attachedPortal.setAttachedHost(null);\r\n        this._attachedPortal = null;\r\n        if (this._disposeFn != null) {\r\n            this._disposeFn();\r\n            this._disposeFn = null;\r\n        }\r\n        return Promise.resolve(null);\r\n    };\r\n    BasePortalHost.prototype.dispose = function () {\r\n        if (this.hasAttached()) {\r\n            this.detach();\r\n        }\r\n        this._isDisposed = true;\r\n    };\r\n    BasePortalHost.prototype.setDisposeFn = function (fn) {\r\n        this._disposeFn = fn;\r\n    };\r\n    return BasePortalHost;\r\n}());\r\nexports.BasePortalHost = BasePortalHost;\r\n//# sourceMappingURL=portal.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/portal/portal.js\n ** module id = 161\n ** module chunks = 2\n **/","\"use strict\";\r\n/**\r\n * OverlayState is a bag of values for either the initial configuration or current state of an\r\n * overlay.\r\n */\r\nvar OverlayState = (function () {\r\n    function OverlayState() {\r\n    }\r\n    return OverlayState;\r\n}());\r\nexports.OverlayState = OverlayState;\r\n//# sourceMappingURL=overlay-state.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/overlay/overlay-state.js\n ** module id = 245\n ** module chunks = 2\n **/","import { Injectable } from '@angular/core';\nimport { Http, URLSearchParams } from '@angular/http';\nimport 'rxjs/add/operator/map';\n\nexport type Mood = 'realistic' | 'utopic';\nexport enum AdverbParam {Off, On};\n\nconst host = 'http://raider.doneright.de';\n\nexport type Options = {\n\tchar: string,\n\tmood: Mood,\n\tadverb: AdverbParam\n};\n\n@Injectable()\nexport class Raider {\n\tprivate apiUrl: string = host + '/api';\n\tprivate  versionUrl: string = host + '/version';\n\n  constructor(private http: Http) {\n\t}\n\n  getSprintName(params: Options) {\n    let search = new URLSearchParams();\n\n\t\tif (params) {\n\t\t\tObject.keys(params).forEach(k =>search.set(k, params[k]));\n\t\t}\n\n    return this.http.get(this.apiUrl, {search})\n      .map((res) => res.json().name);\n  }\n\n\tgetVersion() {\n\t\treturn this.http.get(this.versionUrl)\n\t\t\t.map((res) => res.json().version);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/services/raider.ts\n **/","\"use strict\";\r\n/**\r\n * Reference to an overlay that has been created with the Overlay service.\r\n * Used to manipulate or dispose of said overlay.\r\n */\r\nvar OverlayRef = (function () {\r\n    function OverlayRef(_portalHost, _pane, _state) {\r\n        this._portalHost = _portalHost;\r\n        this._pane = _pane;\r\n        this._state = _state;\r\n    }\r\n    OverlayRef.prototype.attach = function (portal) {\r\n        var _this = this;\r\n        return this._portalHost.attach(portal).then(function () {\r\n            _this._updatePosition();\r\n        });\r\n    };\r\n    OverlayRef.prototype.detach = function () {\r\n        return this._portalHost.detach();\r\n    };\r\n    OverlayRef.prototype.dispose = function () {\r\n        this._portalHost.dispose();\r\n    };\r\n    OverlayRef.prototype.hasAttached = function () {\r\n        return this._portalHost.hasAttached();\r\n    };\r\n    /** Gets the current state config of the overlay. */\r\n    OverlayRef.prototype.getState = function () {\r\n        return this._state;\r\n    };\r\n    /** Updates the position of the overlay based on the position strategy. */\r\n    OverlayRef.prototype._updatePosition = function () {\r\n        if (this._state.positionStrategy) {\r\n            this._state.positionStrategy.apply(this._pane);\r\n        }\r\n    };\r\n    return OverlayRef;\r\n}());\r\nexports.OverlayRef = OverlayRef;\r\n//# sourceMappingURL=overlay-ref.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/overlay/overlay-ref.js\n ** module id = 371\n ** module chunks = 2\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar overlay_state_1 = require('./overlay-state');\r\nvar dom_portal_host_1 = require('../portal/dom-portal-host');\r\nvar overlay_ref_1 = require('./overlay-ref');\r\nvar overlay_position_builder_1 = require('./position/overlay-position-builder');\r\nvar viewport_ruler_1 = require('./position/viewport-ruler');\r\n/** Token used to inject the DOM element that serves as the overlay container. */\r\nexports.OVERLAY_CONTAINER_TOKEN = new core_1.OpaqueToken('overlayContainer');\r\n/** Next overlay unique ID. */\r\nvar nextUniqueId = 0;\r\n/** The default state for newly created overlays. */\r\nvar defaultState = new overlay_state_1.OverlayState();\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\r\n */\r\nvar Overlay = (function () {\r\n    function Overlay(overlayContainerElement, _componentResolver, _positionBuilder) {\r\n        this._componentResolver = _componentResolver;\r\n        this._positionBuilder = _positionBuilder;\r\n        // We inject the container as `any` because the constructor signature cannot reference\r\n        // browser globals (HTMLElement) on non-browser environments, since having a class decorator\r\n        // causes TypeScript to preserve the constructor signature types.\r\n        this._overlayContainerElement = overlayContainerElement;\r\n    }\r\n    /**\r\n     * Creates an overlay.\r\n     * @param state State to apply to the overlay.\r\n     * @returns A reference to the created overlay.\r\n     */\r\n    Overlay.prototype.create = function (state) {\r\n        var _this = this;\r\n        if (state === void 0) { state = defaultState; }\r\n        return this._createPaneElement().then(function (pane) { return _this._createOverlayRef(pane, state); });\r\n    };\r\n    /**\r\n     * Returns a position builder that can be used, via fluent API,\r\n     * to construct and configure a position strategy.\r\n     */\r\n    Overlay.prototype.position = function () {\r\n        return this._positionBuilder;\r\n    };\r\n    /**\r\n     * Creates the DOM element for an overlay and appends it to the overlay container.\r\n     * @returns Promise resolving to the created element.\r\n     */\r\n    Overlay.prototype._createPaneElement = function () {\r\n        var pane = document.createElement('div');\r\n        pane.id = \"md-overlay-\" + nextUniqueId++;\r\n        pane.classList.add('md-overlay-pane');\r\n        this._overlayContainerElement.appendChild(pane);\r\n        return Promise.resolve(pane);\r\n    };\r\n    /**\r\n     * Create a DomPortalHost into which the overlay content can be loaded.\r\n     * @param pane The DOM element to turn into a portal host.\r\n     * @returns A portal host for the given DOM element.\r\n     */\r\n    Overlay.prototype._createPortalHost = function (pane) {\r\n        return new dom_portal_host_1.DomPortalHost(pane, this._componentResolver);\r\n    };\r\n    /**\r\n     * Creates an OverlayRef for an overlay in the given DOM element.\r\n     * @param pane DOM element for the overlay\r\n     * @param state\r\n     * @returns {OverlayRef}\r\n     */\r\n    Overlay.prototype._createOverlayRef = function (pane, state) {\r\n        return new overlay_ref_1.OverlayRef(this._createPortalHost(pane), pane, state);\r\n    };\r\n    Overlay = __decorate([\r\n        core_1.Injectable(),\r\n        __param(0, core_1.Inject(exports.OVERLAY_CONTAINER_TOKEN)), \r\n        __metadata('design:paramtypes', [Object, core_1.ComponentResolver, overlay_position_builder_1.OverlayPositionBuilder])\r\n    ], Overlay);\r\n    return Overlay;\r\n}());\r\nexports.Overlay = Overlay;\r\n/** Providers for Overlay and its related injectables. */\r\nexports.OVERLAY_PROVIDERS = [\r\n    viewport_ruler_1.ViewportRuler,\r\n    overlay_position_builder_1.OverlayPositionBuilder,\r\n    Overlay,\r\n];\r\n//# sourceMappingURL=overlay.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/overlay/overlay.js\n ** module id = 372\n ** module chunks = 2\n **/","\"use strict\";\r\n/** The points of the origin element and the overlay element to connect. */\r\nvar ConnectionPositionPair = (function () {\r\n    function ConnectionPositionPair(origin, overlay) {\r\n        this.originX = origin.originX;\r\n        this.originY = origin.originY;\r\n        this.overlayX = overlay.overlayX;\r\n        this.overlayY = overlay.overlayY;\r\n    }\r\n    return ConnectionPositionPair;\r\n}());\r\nexports.ConnectionPositionPair = ConnectionPositionPair;\r\n//# sourceMappingURL=connected-position.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/overlay/position/connected-position.js\n ** module id = 373\n ** module chunks = 2\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\n/**\r\n * Simple utility for getting the bounds of the browser viewport.\r\n * TODO: internal\r\n */\r\nvar ViewportRuler = (function () {\r\n    function ViewportRuler() {\r\n    }\r\n    // TODO(jelbourn): cache the document's bounding rect and only update it when the window\r\n    // is resized (debounced).\r\n    /** Gets a ClientRect for the viewport's bounds. */\r\n    ViewportRuler.prototype.getViewportRect = function () {\r\n        // Use the document element's bounding rect rather than the window scroll properties\r\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\r\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\r\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\r\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\r\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\r\n        // We use the documentElement instead of the body because, by default (without a css reset)\r\n        // browsers typically give the document body an 8px margin, which is not included in\r\n        // getBoundingClientRect().\r\n        var documentRect = document.documentElement.getBoundingClientRect();\r\n        var scrollPosition = this.getViewportScrollPosition(documentRect);\r\n        var height = window.innerHeight;\r\n        var width = window.innerWidth;\r\n        return {\r\n            top: scrollPosition.top,\r\n            left: scrollPosition.left,\r\n            bottom: scrollPosition.top + height,\r\n            right: scrollPosition.left + width,\r\n            height: height,\r\n            width: width,\r\n        };\r\n    };\r\n    /**\r\n     * Gets the (top, left) scroll position of the viewport.\r\n     * @param documentRect\r\n     */\r\n    ViewportRuler.prototype.getViewportScrollPosition = function (documentRect) {\r\n        if (documentRect === void 0) { documentRect = document.documentElement.getBoundingClientRect(); }\r\n        // The top-left-corner of the viewport is determined by the scroll position of the document\r\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\r\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\r\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\r\n        // `document.documentElement` works consistently, where the `top` and `left` values will\r\n        // equal negative the scroll position.\r\n        var top = documentRect.top < 0 && document.body.scrollTop == 0 ?\r\n            -documentRect.top :\r\n            document.body.scrollTop;\r\n        var left = documentRect.left < 0 && document.body.scrollLeft == 0 ?\r\n            -documentRect.left :\r\n            document.body.scrollLeft;\r\n        return { top: top, left: left };\r\n    };\r\n    ViewportRuler = __decorate([\r\n        core_1.Injectable(), \r\n        __metadata('design:paramtypes', [])\r\n    ], ViewportRuler);\r\n    return ViewportRuler;\r\n}());\r\nexports.ViewportRuler = ViewportRuler;\r\n//# sourceMappingURL=viewport-ruler.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/overlay/position/viewport-ruler.js\n ** module id = 374\n ** module chunks = 2\n **/","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar portal_1 = require('./portal');\r\nvar portal_errors_1 = require('./portal-errors');\r\n/**\r\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n *\r\n * This is the only part of the portal core that directly touches the DOM.\r\n */\r\nvar DomPortalHost = (function (_super) {\r\n    __extends(DomPortalHost, _super);\r\n    function DomPortalHost(_hostDomElement, _componentResolver) {\r\n        _super.call(this);\r\n        this._hostDomElement = _hostDomElement;\r\n        this._componentResolver = _componentResolver;\r\n    }\r\n    /** Attach the given ComponentPortal to DOM element using the ComponentResolver. */\r\n    DomPortalHost.prototype.attachComponentPortal = function (portal) {\r\n        var _this = this;\r\n        if (portal.viewContainerRef == null) {\r\n            throw new portal_errors_1.MdComponentPortalAttachedToDomWithoutOriginError();\r\n        }\r\n        return this._componentResolver.resolveComponent(portal.component).then(function (componentFactory) {\r\n            var ref = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.viewContainerRef.parentInjector);\r\n            var hostView = ref.hostView;\r\n            _this._hostDomElement.appendChild(hostView.rootNodes[0]);\r\n            _this.setDisposeFn(function () { return ref.destroy(); });\r\n            return ref;\r\n        });\r\n    };\r\n    DomPortalHost.prototype.attachTemplatePortal = function (portal) {\r\n        var _this = this;\r\n        var viewContainer = portal.viewContainerRef;\r\n        var viewRef = viewContainer.createEmbeddedView(portal.templateRef);\r\n        viewRef.rootNodes.forEach(function (rootNode) { return _this._hostDomElement.appendChild(rootNode); });\r\n        this.setDisposeFn((function () {\r\n            var index = viewContainer.indexOf(viewRef);\r\n            if (index != -1) {\r\n                viewContainer.remove(index);\r\n            }\r\n        }));\r\n        // TODO(jelbourn): Return locals from view.\r\n        return Promise.resolve(new Map());\r\n    };\r\n    DomPortalHost.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this._hostDomElement.parentNode != null) {\r\n            this._hostDomElement.parentNode.removeChild(this._hostDomElement);\r\n        }\r\n    };\r\n    return DomPortalHost;\r\n}(portal_1.BasePortalHost));\r\nexports.DomPortalHost = DomPortalHost;\r\n//# sourceMappingURL=dom-portal-host.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/portal/dom-portal-host.js\n ** module id = 375\n ** module chunks = 2\n **/","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar error_1 = require('../errors/error');\r\n/** Exception thrown when a ComponentPortal is attached to a DomPortalHost without an origin. */\r\nvar MdComponentPortalAttachedToDomWithoutOriginError = (function (_super) {\r\n    __extends(MdComponentPortalAttachedToDomWithoutOriginError, _super);\r\n    function MdComponentPortalAttachedToDomWithoutOriginError() {\r\n        _super.call(this, 'A ComponentPortal must have an origin set when attached to a DomPortalHost ' +\r\n            'because the DOM element is not part of the Angular application context.');\r\n    }\r\n    return MdComponentPortalAttachedToDomWithoutOriginError;\r\n}(error_1.MdError));\r\nexports.MdComponentPortalAttachedToDomWithoutOriginError = MdComponentPortalAttachedToDomWithoutOriginError;\r\n/** Exception thrown when attempting to attach a null portal to a host. */\r\nvar MdNullPortalError = (function (_super) {\r\n    __extends(MdNullPortalError, _super);\r\n    function MdNullPortalError() {\r\n        _super.call(this, 'Must provide a portal to attach');\r\n    }\r\n    return MdNullPortalError;\r\n}(error_1.MdError));\r\nexports.MdNullPortalError = MdNullPortalError;\r\n/** Exception thrown when attempting to attach a portal to a host that is already attached. */\r\nvar MdPortalAlreadyAttachedError = (function (_super) {\r\n    __extends(MdPortalAlreadyAttachedError, _super);\r\n    function MdPortalAlreadyAttachedError() {\r\n        _super.call(this, 'Host already has a portal attached');\r\n    }\r\n    return MdPortalAlreadyAttachedError;\r\n}(error_1.MdError));\r\nexports.MdPortalAlreadyAttachedError = MdPortalAlreadyAttachedError;\r\n/** Exception thrown when attempting to attach a portal to an already-disposed host. */\r\nvar MdPortalHostAlreadyDisposedError = (function (_super) {\r\n    __extends(MdPortalHostAlreadyDisposedError, _super);\r\n    function MdPortalHostAlreadyDisposedError() {\r\n        _super.call(this, 'This PortalHost has already been disposed');\r\n    }\r\n    return MdPortalHostAlreadyDisposedError;\r\n}(error_1.MdError));\r\nexports.MdPortalHostAlreadyDisposedError = MdPortalHostAlreadyDisposedError;\r\n/** Exception thrown when attempting to attach an unknown portal type. */\r\nvar MdUnknownPortalTypeError = (function (_super) {\r\n    __extends(MdUnknownPortalTypeError, _super);\r\n    function MdUnknownPortalTypeError() {\r\n        _super.call(this, 'Attempting to attach an unknown Portal type. ' +\r\n            'BasePortalHost accepts either a ComponentPortal or a TemplatePortal.');\r\n    }\r\n    return MdUnknownPortalTypeError;\r\n}(error_1.MdError));\r\nexports.MdUnknownPortalTypeError = MdUnknownPortalTypeError;\r\n/** Exception thrown when attempting to attach a portal to a null host. */\r\nvar MdNullPortalHostError = (function (_super) {\r\n    __extends(MdNullPortalHostError, _super);\r\n    function MdNullPortalHostError() {\r\n        _super.call(this, 'Attmepting to attach a portal to a null PortalHost');\r\n    }\r\n    return MdNullPortalHostError;\r\n}(error_1.MdError));\r\nexports.MdNullPortalHostError = MdNullPortalHostError;\r\n/** Exception thrown when attempting to detach a portal that is not attached. */\r\nvar MdNoPortalAttachedError = (function (_super) {\r\n    __extends(MdNoPortalAttachedError, _super);\r\n    function MdNoPortalAttachedError() {\r\n        _super.call(this, 'Attmepting to detach a portal that is not attached to a host');\r\n    }\r\n    return MdNoPortalAttachedError;\r\n}(error_1.MdError));\r\nexports.MdNoPortalAttachedError = MdNoPortalAttachedError;\r\n//# sourceMappingURL=portal-errors.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/portal/portal-errors.js\n ** module id = 376\n ** module chunks = 2\n **/","\"use strict\";\r\n/**\r\n * Applies a CSS transform to an element, including browser-prefixed properties.\r\n * @param element\r\n * @param transformValue\r\n */\r\nfunction applyCssTransform(element, transformValue) {\r\n    // It's important to trim the result, because the browser will ignore the set operation\r\n    // if the string contains only whitespace.\r\n    var value = transformValue.trim();\r\n    element.style.transform = value;\r\n    element.style.webkitTransform = value;\r\n}\r\nexports.applyCssTransform = applyCssTransform;\r\n//# sourceMappingURL=apply-transform.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/style/apply-transform.js\n ** module id = 377\n ** module chunks = 2\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nvar core_1 = require('@angular/core');\r\nexports.LIVE_ANNOUNCER_ELEMENT_TOKEN = new core_1.OpaqueToken('mdLiveAnnouncerElement');\r\nvar MdLiveAnnouncer = (function () {\r\n    function MdLiveAnnouncer(elementToken) {\r\n        // We inject the live element as `any` because the constructor signature cannot reference\r\n        // browser globals (HTMLElement) on non-browser environments, since having a class decorator\r\n        // causes TypeScript to preserve the constructor signature types.\r\n        this._liveElement = elementToken || this._createLiveElement();\r\n    }\r\n    /**\r\n     * @param message Message to be announced to the screenreader\r\n     * @param politeness The politeness of the announcer element.\r\n     */\r\n    MdLiveAnnouncer.prototype.announce = function (message, politeness) {\r\n        var _this = this;\r\n        if (politeness === void 0) { politeness = 'polite'; }\r\n        this._liveElement.textContent = '';\r\n        // TODO: ensure changing the politeness works on all environments we support.\r\n        this._liveElement.setAttribute('aria-live', politeness);\r\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\r\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\r\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\r\n        //   second time without clearing and then using a non-zero delay.\r\n        // (using JAWS 17 at time of this writing).\r\n        setTimeout(function () { return _this._liveElement.textContent = message; }, 100);\r\n    };\r\n    MdLiveAnnouncer.prototype._createLiveElement = function () {\r\n        var liveEl = document.createElement('div');\r\n        liveEl.classList.add('md-live-announcer');\r\n        liveEl.setAttribute('aria-atomic', 'true');\r\n        liveEl.setAttribute('aria-live', 'polite');\r\n        document.body.appendChild(liveEl);\r\n        return liveEl;\r\n    };\r\n    MdLiveAnnouncer = __decorate([\r\n        core_1.Injectable(),\r\n        __param(0, core_1.Optional()),\r\n        __param(0, core_1.Inject(exports.LIVE_ANNOUNCER_ELEMENT_TOKEN)), \r\n        __metadata('design:paramtypes', [Object])\r\n    ], MdLiveAnnouncer);\r\n    return MdLiveAnnouncer;\r\n}());\r\nexports.MdLiveAnnouncer = MdLiveAnnouncer;\r\n//# sourceMappingURL=live-announcer.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/a11y/live-announcer.js\n ** module id = 536\n ** module chunks = 2\n **/","\"use strict\";\r\n// RTL\r\nvar dir_1 = require('./rtl/dir');\r\nexports.Dir = dir_1.Dir;\r\n// Portals\r\nvar portal_1 = require('./portal/portal');\r\nexports.Portal = portal_1.Portal;\r\nexports.BasePortalHost = portal_1.BasePortalHost;\r\nexports.ComponentPortal = portal_1.ComponentPortal;\r\nexports.TemplatePortal = portal_1.TemplatePortal;\r\nvar portal_directives_1 = require('./portal/portal-directives');\r\nexports.PortalHostDirective = portal_directives_1.PortalHostDirective;\r\nexports.TemplatePortalDirective = portal_directives_1.TemplatePortalDirective;\r\nexports.PORTAL_DIRECTIVES = portal_directives_1.PORTAL_DIRECTIVES;\r\nvar dom_portal_host_1 = require('./portal/dom-portal-host');\r\nexports.DomPortalHost = dom_portal_host_1.DomPortalHost;\r\n// Overlay\r\nvar overlay_1 = require('./overlay/overlay');\r\nexports.Overlay = overlay_1.Overlay;\r\nexports.OVERLAY_CONTAINER_TOKEN = overlay_1.OVERLAY_CONTAINER_TOKEN;\r\nexports.OVERLAY_PROVIDERS = overlay_1.OVERLAY_PROVIDERS;\r\nvar overlay_ref_1 = require('./overlay/overlay-ref');\r\nexports.OverlayRef = overlay_ref_1.OverlayRef;\r\nvar overlay_state_1 = require('./overlay/overlay-state');\r\nexports.OverlayState = overlay_state_1.OverlayState;\r\nvar overlay_directives_1 = require('./overlay/overlay-directives');\r\nexports.ConnectedOverlayDirective = overlay_directives_1.ConnectedOverlayDirective;\r\nexports.OverlayOrigin = overlay_directives_1.OverlayOrigin;\r\nexports.OVERLAY_DIRECTIVES = overlay_directives_1.OVERLAY_DIRECTIVES;\r\n// Gestures\r\nvar MdGestureConfig_1 = require('./gestures/MdGestureConfig');\r\nexports.MdGestureConfig = MdGestureConfig_1.MdGestureConfig;\r\n// a11y\r\nvar live_announcer_1 = require('./a11y/live-announcer');\r\nexports.MdLiveAnnouncer = live_announcer_1.MdLiveAnnouncer;\r\nexports.LIVE_ANNOUNCER_ELEMENT_TOKEN = live_announcer_1.LIVE_ANNOUNCER_ELEMENT_TOKEN;\r\nvar unique_selection_dispatcher_1 = require('./coordination/unique-selection-dispatcher');\r\nexports.MdUniqueSelectionDispatcher = unique_selection_dispatcher_1.MdUniqueSelectionDispatcher;\r\n//# sourceMappingURL=core.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/core.js\n ** module id = 538\n ** module chunks = 2\n **/","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar platform_browser_1 = require('@angular/platform-browser');\r\n/* Adjusts configuration of our gesture library, Hammer. */\r\nvar MdGestureConfig = (function (_super) {\r\n    __extends(MdGestureConfig, _super);\r\n    function MdGestureConfig() {\r\n        _super.apply(this, arguments);\r\n        /* List of new event names to add to the gesture support list */\r\n        this.events = [\r\n            'drag',\r\n            'dragstart',\r\n            'dragend',\r\n            'dragright',\r\n            'dragleft',\r\n            'longpress',\r\n        ];\r\n    }\r\n    /*\r\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\r\n     *\r\n     * Our gesture names come from the Material Design gestures spec:\r\n     * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\r\n     *\r\n     * More information on default recognizers can be found in Hammer docs:\r\n     * http://hammerjs.github.io/recognizer-pan/\r\n     * http://hammerjs.github.io/recognizer-press/\r\n     *\r\n     * TODO: Confirm threshold numbers with Material Design UX Team\r\n     * */\r\n    MdGestureConfig.prototype.buildHammer = function (element) {\r\n        var mc = new Hammer(element);\r\n        // create custom gesture recognizers\r\n        var drag = new Hammer.Pan({ event: 'drag', threshold: 6 });\r\n        var longpress = new Hammer.Press({ event: 'longpress', time: 500 });\r\n        // ensure custom recognizers can coexist with the default gestures (i.e. pan, press, swipe)\r\n        var pan = new Hammer.Pan();\r\n        var press = new Hammer.Press();\r\n        var swipe = new Hammer.Swipe();\r\n        drag.recognizeWith(pan);\r\n        drag.recognizeWith(swipe);\r\n        pan.recognizeWith(swipe);\r\n        longpress.recognizeWith(press);\r\n        // add customized gestures to Hammer manager\r\n        mc.add([drag, pan, swipe, press, longpress]);\r\n        return mc;\r\n    };\r\n    MdGestureConfig = __decorate([\r\n        core_1.Injectable(), \r\n        __metadata('design:paramtypes', [])\r\n    ], MdGestureConfig);\r\n    return MdGestureConfig;\r\n}(platform_browser_1.HammerGestureConfig));\r\nexports.MdGestureConfig = MdGestureConfig;\r\n//# sourceMappingURL=MdGestureConfig.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/gestures/MdGestureConfig.js\n ** module id = 539\n ** module chunks = 2\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar overlay_1 = require('./overlay');\r\nvar portal_1 = require('../portal/portal');\r\nvar overlay_state_1 = require('./overlay-state');\r\nvar connected_position_1 = require('./position/connected-position');\r\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\r\nvar defaultPositionList = [\r\n    new connected_position_1.ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\r\n    new connected_position_1.ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\r\n];\r\n/**\r\n * Directive applied to an element to make it usable as an origin for an Overlay using a\r\n * ConnectedPositionStrategy.\r\n */\r\nvar OverlayOrigin = (function () {\r\n    function OverlayOrigin(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n    Object.defineProperty(OverlayOrigin.prototype, \"elementRef\", {\r\n        get: function () {\r\n            return this._elementRef;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    OverlayOrigin = __decorate([\r\n        core_1.Directive({\r\n            selector: '[overlay-origin]',\r\n            exportAs: 'overlayOrigin',\r\n        }), \r\n        __metadata('design:paramtypes', [core_1.ElementRef])\r\n    ], OverlayOrigin);\r\n    return OverlayOrigin;\r\n}());\r\nexports.OverlayOrigin = OverlayOrigin;\r\n/**\r\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\r\n */\r\nvar ConnectedOverlayDirective = (function () {\r\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\r\n    function ConnectedOverlayDirective(_overlay, templateRef, viewContainerRef) {\r\n        this._overlay = _overlay;\r\n        this._templatePortal = new portal_1.TemplatePortal(templateRef, viewContainerRef);\r\n    }\r\n    Object.defineProperty(ConnectedOverlayDirective.prototype, \"overlayRef\", {\r\n        get: function () {\r\n            return this._overlayRef;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** TODO: internal */\r\n    ConnectedOverlayDirective.prototype.ngOnInit = function () {\r\n        this._createOverlay();\r\n    };\r\n    /** TODO: internal */\r\n    ConnectedOverlayDirective.prototype.ngOnDestroy = function () {\r\n        this._destroyOverlay();\r\n    };\r\n    /** Creates an overlay and attaches this directive's template to it. */\r\n    ConnectedOverlayDirective.prototype._createOverlay = function () {\r\n        var _this = this;\r\n        if (!this.positions || !this.positions.length) {\r\n            this.positions = defaultPositionList;\r\n        }\r\n        var overlayConfig = new overlay_state_1.OverlayState();\r\n        overlayConfig.positionStrategy =\r\n            this._overlay.position().connectedTo(this.origin.elementRef, { originX: this.positions[0].overlayX, originY: this.positions[0].originY }, { overlayX: this.positions[0].overlayX, overlayY: this.positions[0].overlayY });\r\n        this._overlay.create(overlayConfig).then(function (ref) {\r\n            _this._overlayRef = ref;\r\n            _this._overlayRef.attach(_this._templatePortal);\r\n        });\r\n    };\r\n    /** Destroys the overlay created by this directive. */\r\n    ConnectedOverlayDirective.prototype._destroyOverlay = function () {\r\n        this._overlayRef.dispose();\r\n    };\r\n    __decorate([\r\n        core_1.Input(), \r\n        __metadata('design:type', OverlayOrigin)\r\n    ], ConnectedOverlayDirective.prototype, \"origin\", void 0);\r\n    __decorate([\r\n        core_1.Input(), \r\n        __metadata('design:type', Array)\r\n    ], ConnectedOverlayDirective.prototype, \"positions\", void 0);\r\n    ConnectedOverlayDirective = __decorate([\r\n        core_1.Directive({\r\n            selector: '[connected-overlay]'\r\n        }), \r\n        __metadata('design:paramtypes', [overlay_1.Overlay, core_1.TemplateRef, core_1.ViewContainerRef])\r\n    ], ConnectedOverlayDirective);\r\n    return ConnectedOverlayDirective;\r\n}());\r\nexports.ConnectedOverlayDirective = ConnectedOverlayDirective;\r\nexports.OVERLAY_DIRECTIVES = [ConnectedOverlayDirective, OverlayOrigin];\r\n//# sourceMappingURL=overlay-directives.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/overlay/overlay-directives.js\n ** module id = 540\n ** module chunks = 2\n **/","\"use strict\";\r\nvar apply_transform_1 = require('@angular2-material/core/style/apply-transform');\r\nvar connected_position_1 = require('./connected-position');\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implict position relative some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n */\r\nvar ConnectedPositionStrategy = (function () {\r\n    function ConnectedPositionStrategy(_connectedTo, _originPos, _overlayPos, _viewportRuler) {\r\n        this._connectedTo = _connectedTo;\r\n        this._originPos = _originPos;\r\n        this._overlayPos = _overlayPos;\r\n        this._viewportRuler = _viewportRuler;\r\n        // TODO(jelbourn): set RTL to the actual value from the app.\r\n        /** Whether the we're dealing with an RTL context */\r\n        this._isRtl = false;\r\n        /** Ordered list of preferred positions, from most to least desirable. */\r\n        this._preferredPositions = [];\r\n        this._origin = this._connectedTo.nativeElement;\r\n        this.withFallbackPosition(_originPos, _overlayPos);\r\n    }\r\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\r\n        get: function () {\r\n            return this._preferredPositions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the position of the overlay element, using whichever preferred position relative\r\n     * to the origin fits on-screen.\r\n     * TODO: internal\r\n     */\r\n    ConnectedPositionStrategy.prototype.apply = function (element) {\r\n        // We need the bounding rects for the origin and the overlay to determine how to position\r\n        // the overlay relative to the origin.\r\n        var originRect = this._origin.getBoundingClientRect();\r\n        var overlayRect = element.getBoundingClientRect();\r\n        // We use the viewport rect to determine whether a position would go off-screen.\r\n        var viewportRect = this._viewportRuler.getViewportRect();\r\n        var firstOverlayPoint = null;\r\n        // We want to place the overlay in the first of the preferred positions such that the\r\n        // overlay fits on-screen.\r\n        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {\r\n            var pos = _a[_i];\r\n            // Get the (x, y) point of connection on the origin, and then use that to get the\r\n            // (top, left) coordinate for the overlay at `pos`.\r\n            var originPoint = this._getOriginConnectionPoint(originRect, pos);\r\n            var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\r\n            firstOverlayPoint = firstOverlayPoint || overlayPoint;\r\n            // If the overlay in the calculated position fits on-screen, put it there and we're done.\r\n            if (this._willOverlayFitWithinViewport(overlayPoint, overlayRect, viewportRect)) {\r\n                this._setElementPosition(element, overlayPoint);\r\n                return Promise.resolve(null);\r\n            }\r\n        }\r\n        // TODO(jelbourn): fallback behavior for when none of the preferred positions fit on-screen.\r\n        // For now, just stick it in the first position and let it go off-screen.\r\n        this._setElementPosition(element, firstOverlayPoint);\r\n        return Promise.resolve(null);\r\n    };\r\n    ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos) {\r\n        this._preferredPositions.push(new connected_position_1.ConnectionPositionPair(originPos, overlayPos));\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\r\n     * @param rect\r\n     */\r\n    ConnectedPositionStrategy.prototype._getStartX = function (rect) {\r\n        return this._isRtl ? rect.right : rect.left;\r\n    };\r\n    /**\r\n     * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\r\n     * @param rect\r\n     */\r\n    ConnectedPositionStrategy.prototype._getEndX = function (rect) {\r\n        return this._isRtl ? rect.left : rect.right;\r\n    };\r\n    /**\r\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\r\n     * @param originRect\r\n     * @param pos\r\n     */\r\n    ConnectedPositionStrategy.prototype._getOriginConnectionPoint = function (originRect, pos) {\r\n        var originStartX = this._getStartX(originRect);\r\n        var originEndX = this._getEndX(originRect);\r\n        var x;\r\n        if (pos.originX == 'center') {\r\n            x = originStartX + (originRect.width / 2);\r\n        }\r\n        else {\r\n            x = pos.originX == 'start' ? originStartX : originEndX;\r\n        }\r\n        var y;\r\n        if (pos.originY == 'center') {\r\n            y = originRect.top + (originRect.height / 2);\r\n        }\r\n        else {\r\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\r\n        }\r\n        return { x: x, y: y };\r\n    };\r\n    /**\r\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\r\n     * origin point to which the overlay should be connected.\r\n     * @param originPoint\r\n     * @param overlayRect\r\n     * @param pos\r\n     */\r\n    ConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, pos) {\r\n        // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\r\n        // relative to the origin point.\r\n        var overlayStartX;\r\n        if (pos.overlayX == 'center') {\r\n            overlayStartX = -overlayRect.width / 2;\r\n        }\r\n        else {\r\n            overlayStartX = pos.overlayX == 'start' ? 0 : -overlayRect.width;\r\n        }\r\n        var overlayStartY;\r\n        if (pos.overlayY == 'center') {\r\n            overlayStartY = -overlayRect.height / 2;\r\n        }\r\n        else {\r\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\r\n        }\r\n        return {\r\n            x: originPoint.x + overlayStartX,\r\n            y: originPoint.y + overlayStartY\r\n        };\r\n    };\r\n    /**\r\n     * Gets whether the overlay positioned at the given point will fit on-screen.\r\n     * @param overlayPoint The top-left coordinate of the overlay.\r\n     * @param overlayRect Bounding rect of the overlay, used to get its size.\r\n     * @param viewportRect The bounding viewport.\r\n     */\r\n    ConnectedPositionStrategy.prototype._willOverlayFitWithinViewport = function (overlayPoint, overlayRect, viewportRect) {\r\n        // TODO(jelbourn): probably also want some space between overlay edge and viewport edge.\r\n        return overlayPoint.x >= viewportRect.left &&\r\n            overlayPoint.x + overlayRect.width <= viewportRect.right &&\r\n            overlayPoint.y >= viewportRect.top &&\r\n            overlayPoint.y + overlayRect.height <= viewportRect.bottom;\r\n    };\r\n    /**\r\n     * Physically positions the overlay element to the given coordinate.\r\n     * @param element\r\n     * @param overlayPoint\r\n     */\r\n    ConnectedPositionStrategy.prototype._setElementPosition = function (element, overlayPoint) {\r\n        var scrollPos = this._viewportRuler.getViewportScrollPosition();\r\n        var x = overlayPoint.x + scrollPos.left;\r\n        var y = overlayPoint.y + scrollPos.top;\r\n        // TODO(jelbourn): we don't want to always overwrite the transform property here,\r\n        // because it will need to be used for animations.\r\n        apply_transform_1.applyCssTransform(element, \"translateX(\" + x + \"px) translateY(\" + y + \"px)\");\r\n    };\r\n    return ConnectedPositionStrategy;\r\n}());\r\nexports.ConnectedPositionStrategy = ConnectedPositionStrategy;\r\n//# sourceMappingURL=connected-position-strategy.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/overlay/position/connected-position-strategy.js\n ** module id = 541\n ** module chunks = 2\n **/","\"use strict\";\r\nvar apply_transform_1 = require('@angular2-material/core/style/apply-transform');\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * explicit position relative to the browser's viewport.\r\n */\r\nvar GlobalPositionStrategy = (function () {\r\n    function GlobalPositionStrategy() {\r\n        this._cssPosition = 'absolute';\r\n        this._top = '';\r\n        this._bottom = '';\r\n        this._left = '';\r\n        this._right = '';\r\n        /** Array of individual applications of translateX(). Currently only for centering. */\r\n        this._translateX = [];\r\n        /** Array of individual applications of translateY(). Currently only for centering. */\r\n        this._translateY = [];\r\n    }\r\n    /** Sets the element to usee CSS position: fixed */\r\n    GlobalPositionStrategy.prototype.fixed = function () {\r\n        this._cssPosition = 'fixed';\r\n        return this;\r\n    };\r\n    /** Sets the element to usee CSS position: absolute. This is the default. */\r\n    GlobalPositionStrategy.prototype.absolute = function () {\r\n        this._cssPosition = 'absolute';\r\n        return this;\r\n    };\r\n    /** Sets the top position of the overlay. Clears any previously set vertical position. */\r\n    GlobalPositionStrategy.prototype.top = function (value) {\r\n        this._bottom = '';\r\n        this._translateY = [];\r\n        this._top = value;\r\n        return this;\r\n    };\r\n    /** Sets the left position of the overlay. Clears any previously set horizontal position. */\r\n    GlobalPositionStrategy.prototype.left = function (value) {\r\n        this._right = '';\r\n        this._translateX = [];\r\n        this._left = value;\r\n        return this;\r\n    };\r\n    /** Sets the bottom position of the overlay. Clears any previously set vertical position. */\r\n    GlobalPositionStrategy.prototype.bottom = function (value) {\r\n        this._top = '';\r\n        this._translateY = [];\r\n        this._bottom = value;\r\n        return this;\r\n    };\r\n    /** Sets the right position of the overlay. Clears any previously set horizontal position. */\r\n    GlobalPositionStrategy.prototype.right = function (value) {\r\n        this._left = '';\r\n        this._translateX = [];\r\n        this._right = value;\r\n        return this;\r\n    };\r\n    /**\r\n     * Centers the overlay horizontally with an optional offset.\r\n     * Clears any previously set horizontal position.\r\n     */\r\n    GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {\r\n        if (offset === void 0) { offset = '0px'; }\r\n        this._left = '50%';\r\n        this._right = '';\r\n        this._translateX = ['-50%', offset];\r\n        return this;\r\n    };\r\n    /**\r\n     * Centers the overlay vertically with an optional offset.\r\n     * Clears any previously set vertical position.\r\n     */\r\n    GlobalPositionStrategy.prototype.centerVertically = function (offset) {\r\n        if (offset === void 0) { offset = '0px'; }\r\n        this._top = '50%';\r\n        this._bottom = '';\r\n        this._translateY = ['-50%', offset];\r\n        return this;\r\n    };\r\n    /**\r\n     * Apply the position to the element.\r\n     * TODO: internal\r\n     */\r\n    GlobalPositionStrategy.prototype.apply = function (element) {\r\n        element.style.position = this._cssPosition;\r\n        element.style.top = this._top;\r\n        element.style.left = this._left;\r\n        element.style.bottom = this._bottom;\r\n        element.style.right = this._right;\r\n        // TODO(jelbourn): we don't want to always overwrite the transform property here,\r\n        // because it will need to be used for animations.\r\n        var tranlateX = this._reduceTranslateValues('translateX', this._translateX);\r\n        var translateY = this._reduceTranslateValues('translateY', this._translateY);\r\n        apply_transform_1.applyCssTransform(element, tranlateX + \" \" + translateY);\r\n        return Promise.resolve(null);\r\n    };\r\n    /** Reduce a list of translate values to a string that can be used in the transform property */\r\n    GlobalPositionStrategy.prototype._reduceTranslateValues = function (translateFn, values) {\r\n        return values.map(function (t) { return (translateFn + \"(\" + t + \")\"); }).join(' ');\r\n    };\r\n    return GlobalPositionStrategy;\r\n}());\r\nexports.GlobalPositionStrategy = GlobalPositionStrategy;\r\n//# sourceMappingURL=global-position-strategy.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/overlay/position/global-position-strategy.js\n ** module id = 542\n ** module chunks = 2\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar viewport_ruler_1 = require('./viewport-ruler');\r\nvar connected_position_strategy_1 = require('./connected-position-strategy');\r\nvar core_1 = require('@angular/core');\r\nvar global_position_strategy_1 = require('./global-position-strategy');\r\n/** Builder for overlay position strategy. */\r\nvar OverlayPositionBuilder = (function () {\r\n    function OverlayPositionBuilder(_viewportRuler) {\r\n        this._viewportRuler = _viewportRuler;\r\n    }\r\n    /** Creates a global position strategy. */\r\n    OverlayPositionBuilder.prototype.global = function () {\r\n        return new global_position_strategy_1.GlobalPositionStrategy();\r\n    };\r\n    /** Creates a relative position strategy. */\r\n    OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {\r\n        return new connected_position_strategy_1.ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\r\n    };\r\n    OverlayPositionBuilder = __decorate([\r\n        core_1.Injectable(), \r\n        __metadata('design:paramtypes', [viewport_ruler_1.ViewportRuler])\r\n    ], OverlayPositionBuilder);\r\n    return OverlayPositionBuilder;\r\n}());\r\nexports.OverlayPositionBuilder = OverlayPositionBuilder;\r\n//# sourceMappingURL=overlay-position-builder.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/overlay/position/overlay-position-builder.js\n ** module id = 543\n ** module chunks = 2\n **/","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\nvar portal_1 = require('./portal');\r\n/**\r\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\r\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\r\n *\r\n * Usage:\r\n * <template portal #greeting>\r\n *   <p> Hello {{name}} </p>\r\n * </template>\r\n */\r\nvar TemplatePortalDirective = (function (_super) {\r\n    __extends(TemplatePortalDirective, _super);\r\n    function TemplatePortalDirective(templateRef, viewContainerRef) {\r\n        _super.call(this, templateRef, viewContainerRef);\r\n    }\r\n    TemplatePortalDirective = __decorate([\r\n        core_1.Directive({\r\n            selector: '[portal]',\r\n            exportAs: 'portal',\r\n        }), \r\n        __metadata('design:paramtypes', [core_1.TemplateRef, core_1.ViewContainerRef])\r\n    ], TemplatePortalDirective);\r\n    return TemplatePortalDirective;\r\n}(portal_1.TemplatePortal));\r\nexports.TemplatePortalDirective = TemplatePortalDirective;\r\n/**\r\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\r\n * directly attached to it, enabling declarative use.\r\n *\r\n * Usage:\r\n * <template [portalHost]=\"greeting\"></template>\r\n */\r\nvar PortalHostDirective = (function (_super) {\r\n    __extends(PortalHostDirective, _super);\r\n    function PortalHostDirective(_componentResolver, _viewContainerRef) {\r\n        _super.call(this);\r\n        this._componentResolver = _componentResolver;\r\n        this._viewContainerRef = _viewContainerRef;\r\n    }\r\n    Object.defineProperty(PortalHostDirective.prototype, \"portal\", {\r\n        get: function () {\r\n            return this._portal;\r\n        },\r\n        set: function (p) {\r\n            this._replaceAttachedPortal(p);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Attach the given ComponentPortal to this PortlHost using the ComponentResolver. */\r\n    PortalHostDirective.prototype.attachComponentPortal = function (portal) {\r\n        var _this = this;\r\n        portal.setAttachedHost(this);\r\n        // If the portal specifies an origin, use that as the logical location of the component\r\n        // in the application tree. Otherwise use the location of this PortalHost.\r\n        var viewContainerRef = portal.viewContainerRef != null ?\r\n            portal.viewContainerRef :\r\n            this._viewContainerRef;\r\n        return this._componentResolver.resolveComponent(portal.component).then(function (componentFactory) {\r\n            var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, viewContainerRef.parentInjector);\r\n            _this.setDisposeFn(function () { return ref.destroy(); });\r\n            return ref;\r\n        });\r\n    };\r\n    /** Attach the given TemplatePortal to this PortlHost as an embedded View. */\r\n    PortalHostDirective.prototype.attachTemplatePortal = function (portal) {\r\n        var _this = this;\r\n        portal.setAttachedHost(this);\r\n        this._viewContainerRef.createEmbeddedView(portal.templateRef);\r\n        this.setDisposeFn(function () { return _this._viewContainerRef.clear(); });\r\n        // TODO(jelbourn): return locals from view\r\n        return Promise.resolve(new Map());\r\n    };\r\n    /** Detatches the currently attached Portal (if there is one) and attaches the given Portal. */\r\n    PortalHostDirective.prototype._replaceAttachedPortal = function (p) {\r\n        var _this = this;\r\n        var maybeDetach = this.hasAttached() ? this.detach() : Promise.resolve(null);\r\n        maybeDetach.then(function () {\r\n            if (p != null) {\r\n                _this.attach(p);\r\n                _this._portal = p;\r\n            }\r\n        });\r\n    };\r\n    PortalHostDirective = __decorate([\r\n        core_1.Directive({\r\n            selector: '[portalHost]',\r\n            inputs: ['portal: portalHost']\r\n        }), \r\n        __metadata('design:paramtypes', [core_1.ComponentResolver, core_1.ViewContainerRef])\r\n    ], PortalHostDirective);\r\n    return PortalHostDirective;\r\n}(portal_1.BasePortalHost));\r\nexports.PortalHostDirective = PortalHostDirective;\r\nexports.PORTAL_DIRECTIVES = [TemplatePortalDirective, PortalHostDirective];\r\n//# sourceMappingURL=portal-directives.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/portal/portal-directives.js\n ** module id = 544\n ** module chunks = 2\n **/","\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = require('@angular/core');\r\n/**\r\n * Directive to listen to changes of direction of part of the DOM.\r\n *\r\n * Applications should use this directive instead of the native attribute so that Material\r\n * components can listen on changes of direction.\r\n */\r\nvar Dir = (function () {\r\n    function Dir() {\r\n        this._dir = 'ltr';\r\n        this.dirChange = new core_1.EventEmitter();\r\n    }\r\n    Object.defineProperty(Dir.prototype, \"dir\", {\r\n        get: function () {\r\n            return this._dir;\r\n        },\r\n        set: function (v) {\r\n            var old = this._dir;\r\n            this._dir = v;\r\n            if (old != this._dir) {\r\n                this.dirChange.emit(null);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dir.prototype, \"value\", {\r\n        get: function () { return this.dir; },\r\n        set: function (v) { this.dir = v; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    __decorate([\r\n        core_1.Input('dir'), \r\n        __metadata('design:type', String)\r\n    ], Dir.prototype, \"_dir\", void 0);\r\n    __decorate([\r\n        core_1.Output(), \r\n        __metadata('design:type', Object)\r\n    ], Dir.prototype, \"dirChange\", void 0);\r\n    __decorate([\r\n        core_1.HostBinding('attr.dir'), \r\n        __metadata('design:type', String)\r\n    ], Dir.prototype, \"dir\", null);\r\n    Dir = __decorate([\r\n        core_1.Directive({\r\n            selector: '[dir]',\r\n            // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\r\n            exportAs: '$implicit'\r\n        }), \r\n        __metadata('design:paramtypes', [])\r\n    ], Dir);\r\n    return Dir;\r\n}());\r\nexports.Dir = Dir;\r\n//# sourceMappingURL=dir.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular2-material/core/rtl/dir.js\n ** module id = 545\n ** module chunks = 2\n **/","import { provideRouter, RouterConfig } from '@angular/router';\n\nimport {About} from './components/about/about';\nimport {Home} from './components/home/home';\n\nconst routes: RouterConfig = [\n  { path: '', redirectTo: 'home', terminal: true },\n  { path: 'home', component: Home },\n  { path: 'about', component: About }\n];\n\nexport const APP_ROUTER_PROVIDERS = [\n  provideRouter(routes)\n];\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/app.routes.ts\n **/","import { Component, OnInit } from '@angular/core';\nimport { ROUTER_DIRECTIVES } from '@angular/router';\nimport { MD_TOOLBAR_DIRECTIVES } from '@angular2-material/toolbar';\nimport { MdButton } from '@angular2-material/button';\n\nimport { Raider } from './services/raider';\n\n@Component({\n  selector: 'app',\n  directives: [ ROUTER_DIRECTIVES, MD_TOOLBAR_DIRECTIVES, MdButton ],\n\tstyles: [require('./app.css')],\n\tpipes: [],\n  providers: [ Raider ],\n  template: require('./app.html'),\n})\n\nexport class App implements OnInit {\n\tpublic version: string;\n\n  constructor(private raider: Raider) {}\n\n\tngOnInit() {\n\t\tthis.raider.getVersion()\n\t\t\t.subscribe(v => this.version = `v${v}`);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/app.ts\n **/","import {Component} from '@angular/core';\nimport {MD_CARD_DIRECTIVES} from '@angular2-material/card';\nimport {MdButton} from '@angular2-material/button';\n\n@Component({\n  selector: 'about',\n  pipes: [],\n  providers: [],\n  directives: [MD_CARD_DIRECTIVES, MdButton],\n  styles: [require('./about.css')],\n  template: require('./about.html')\n})\n\nexport class About {\n\n  constructor() {\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/components/about/about.ts\n **/","import {Component} from '@angular/core';\nimport {MD_CARD_DIRECTIVES} from '@angular2-material/card';\n\nimport {SprintName} from '../sprint-name';\n\n@Component({\n  selector: 'home',\n  directives: [ MD_CARD_DIRECTIVES, SprintName ],\n  styles: [require('./home.css')],\n  template: require('./home.html')\n})\n\nexport class Home {\n\tpublic name: string;\n\n\tconstructor() {}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/components/home/home.ts\n **/","export * from './sprint-name';\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/components/sprint-name/index.ts\n **/","import {Component, Output, EventEmitter} from '@angular/core';\nimport {FORM_DIRECTIVES} from '@angular/forms';\nimport {MD_CARD_DIRECTIVES} from '@angular2-material/card';\nimport {MdInput} from '@angular2-material/input';\nimport {MdCheckbox} from '@angular2-material/checkbox';\nimport {MdButton} from '@angular2-material/button';\nimport {MD_RADIO_DIRECTIVES} from '@angular2-material/radio';\nimport {MdUniqueSelectionDispatcher} from '@angular2-material/core';\n\nimport {Raider} from '../../services/raider';\nimport {Options} from '../../services/raider';\nimport {Mood} from '../../services/raider';\nimport {AdverbParam} from '../../services/raider';\n\n@Component({\n  selector: 'sprint-name',\n  providers: [Raider, MdUniqueSelectionDispatcher],\n  directives: [MD_CARD_DIRECTIVES, FORM_DIRECTIVES, MD_RADIO_DIRECTIVES, MdInput, MdButton, MdCheckbox],\n  template: require('./sprint-name.html'),\n  styles: [require('./sprint-name.css')]\n})\n\nexport class SprintName {\n\t@Output('get') emitter = new EventEmitter();\n\n\tpublic params: Options;\n\n\tconstructor(private raider: Raider) {\n\t\tthis.params = {char: '', mood: 'realistic', adverb: AdverbParam.Off};\n\t}\n\n\tgetSprintName() {\n\t\treturn this.raider.getSprintName(this.params)\n\t\t\t.subscribe(\n\t\t\t\tname => this.emitter.emit(name),\n\t\t\t\te => this.emitter.emit(`Invalid character \"${this.params.char}\"`)\n\t\t\t);\n\t}\n\n\tget adverb() {\n\t\treturn this.params.adverb === AdverbParam.On;\n\t}\n\n\tset adverb(b) {\n\t\tthis.params.adverb = b ? AdverbParam.On : AdverbParam.Off;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/components/sprint-name/sprint-name.ts\n **/","module.exports = \"<md-toolbar color=\\\"primary\\\">\\n\\t<h3>raider {{version}}</h3>\\n  <span class=\\\"fill\\\"></span>\\n\\t<a md-button [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/home']\\\">\\n\\t\\tRaider\\n\\t</a>\\n\\t<a md-button [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/about']\\\">\\n\\t\\tAbout\\n\\t</a>\\n</md-toolbar>\\n\\n<main>\\n\\t<router-outlet></router-outlet>\\n</main>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/app.html\n ** module id = 552\n ** module chunks = 2\n **/","module.exports = \"<md-card>\\n\\n\\t<md-card-title-group>\\n\\t\\t<md-card-title>raider online</md-card-title>\\n\\t\\t<md-card-subtitle>Online sprint name generator</md-card-subtitle>\\n\\t</md-card-title-group>\\n\\n\\t<md-card-content>\\n\\t\\t\\traider online is an online iterface for the <kbd>sprint-name</kbd> cli tool installed by <a href=\\\"https://npmjs.com/raider\\\">raider</a>,\\n\\t\\t\\t\\\"A simple module for generating mostly grumpy animal alliterations for sprint names\\\"\\n\\t</md-card-content>\\n\\n\\t<md-card-actions>\\n\\t\\t<a href=\\\"http://github.com/michaelkrone/raider\\\" md-raised-button color=\\\"accent\\\">raider on Github</a>\\n\\t</md-card-actions>\\n\\n</md-card>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/components/about/about.html\n ** module id = 553\n ** module chunks = 2\n **/","module.exports = \"\\n<sprint-name (get)=\\\"name = $event\\\"></sprint-name>\\n\\n<md-card>\\n\\t<md-card-title *ngIf=\\\"name\\\">{{name}}</md-card-title>\\n\\t<span *ngIf=\\\"!name\\\">Generate your sprint name ...</span>\\n</md-card>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/components/home/home.html\n ** module id = 554\n ** module chunks = 2\n **/","module.exports = \"<md-card>\\n\\n\\t<md-card-title-group>\\n\\t\\t<md-card-title>Generate a{{params.mood === 'utopic' ? 'n' : ''}} {{params.mood}} sprint name {{params.char ? 'with ' + '\\\\'' + params.char + '\\\\'' : ''}}</md-card-title>\\n\\t\\t<md-card-subtitle>Use grumpy animal alliterations for your sprint names</md-card-subtitle>\\n\\t</md-card-title-group>\\n\\n\\t<md-card-content  class=\\\"flex row\\\">\\n\\t\\t<fieldset>\\n\\t\\t\\t<input onfocus=\\\"this.select()\\\" onkeyup=\\\"this.select()\\\"\\n\\t\\t\\t\\tplaceholder=\\\"?\\\" [ngModel]=\\\"params.char\\\" (ngModelChange)=\\\"params.char = $event;getSprintName()\\\"\\n\\t\\t\\t\\tmaxlength=\\\"1\\\" autofocus>\\n\\t\\t</fieldset>\\n\\n\\t\\t<fieldset>\\n\\t\\t\\t<md-checkbox [checked]=\\\"adverb\\\" (change)=\\\"adverb = $event.checked\\\">adberb</md-checkbox>\\n\\n\\t\\t\\t<md-radio-group [value]=\\\"params.mood\\\" (change)=\\\"params.mood = $event.value\\\">\\n\\t\\t\\t\\t<md-radio-button value=\\\"realistic\\\">realistic</md-radio-button>\\n\\t\\t\\t\\t<md-radio-button value=\\\"utopic\\\">utopic</md-radio-button>\\n\\t\\t\\t</md-radio-group>\\n\\t\\t</fieldset>\\n\\n\\t\\t<kbd>$ sprint-name {{params.char ? params.char + ' ' : ''}}--mood={{params.mood}} {{adverb ? '--adverb' : ''}}</kbd>\\n\\n\\t</md-card-content>\\n\\n\\t<md-card-actions>\\n\\t\\t<button md-raised-button color=\\\"accent\\\" (click)=\\\"getSprintName()\\\">Generate</button>\\n\\t</md-card-actions>\\n\\n</md-card>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/components/sprint-name/sprint-name.html\n ** module id = 555\n ** module chunks = 2\n **/","module.exports = \"body {\\n\\tmargin: 0;\\n\\tpadding: 0;\\n}\\n\\n.fill {\\n\\tflex: 1 1 auto;\\n}\\n\\na.active {\\n\\tbackground: white;\\n\\tcolor: #9c27b0\\n}\\n\\na {\\n\\ttext-transform: uppercase;\\n}\\n\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/app.css\n ** module id = 745\n ** module chunks = 2\n **/","module.exports = \"a {\\n\\ttext-transform: uppercase;\\n}\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/components/about/about.css\n ** module id = 746\n ** module chunks = 2\n **/","module.exports = \"md-card {\\n\\tmargin-top: 36px;\\n}\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/components/home/home.css\n ** module id = 747\n ** module chunks = 2\n **/","module.exports = \"::selection {\\n  background: #009688;\\n\\tcolor: #fff;\\n}\\n::-moz-selection {\\n  background: #009688;\\n\\tcolor: #fff;\\n}\\n.flex {\\n\\tdisplay: flex;\\n\\tflex-wrap: wrap;\\n\\tjustify-content: flex-start;\\n\\talign-items: flex-start;\\n}\\n\\n.flex.row {\\n\\t\\tflex-direction: row;\\n}\\n\\ninput {\\n\\tborder-width: 0 0 1px 0;\\n\\toutline: none;\\n\\tmax-width: 58px;\\n\\tfont-size: 58px;\\n\\tpadding-left: 12px;\\n  text-transform: uppercase;\\n}\\n\\nfieldset {\\n\\tmax-width: 150px;\\n\\tdisplay: inline-block;\\n\\tborder: none;\\n}\\n\\nbutton {\\n\\ttext-transform: uppercase;\\n}\\n\\nkbd {\\n\\tbackground: #eee;\\n\\tpadding: 8px;\\n\\tmax-width: 360px;\\n  overflow-x: auto;\\n}\\n\\nmd-checkbox {\\n\\tdisplay: inline-block;\\n\\tmargin-bottom: 8px;\\n}\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/components/sprint-name/sprint-name.css\n ** module id = 748\n ** module chunks = 2\n **/"],"mappings":";;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACftBA;AAAA;;AAAA;AAuBA;;AAAA;AAtBA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpzptGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACljEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AAEA;AAWA;AAGA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAjBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAYA;;AAAA;AAVA;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AAWA;AAEA;AACA;AAZA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAMA;AAAA;AAJA;;;;;;;;;;;;;;;;;;ACbA;AACA;AAEA;AASA;AAGA;AAAA;AAVA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAMA;AAAA;AAJA;;;;;;;;;;;;ACZA;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAUA;AAKA;AAAA;AAJA;AAKA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAlBA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA0BA;;AAAA;AAxBA;;;;;;;;ACtBA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;","sourceRoot":""}